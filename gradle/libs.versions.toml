[plugins]

kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
nebula-release = { id = "com.netflix.nebula.release", version.ref = "nebula" }
nexus-publish = { id = "io.github.gradle-nexus.publish-plugin", version.ref = "nexus" }

[versions]

kotlin = "2.2.0"
nebula = "20.2.0"
nexus = "2.0.0"

prometheus = "1.3.10"
opentelemetry = "1.52.0"
opentelemetry-instrumentation = "2.18.1"
opentelemetry-instrumentation-incubator = "2.18.0-alpha"
opentelemetry-semconv = "1.34.0"
hikaricp = "6.3.0"
postgresql = "42.7.7"
jcommander = "1.82"

logback = "1.5.18"
testcontainers = "1.21.3"
junit = "5.13.3"
mockk = "1.14.5"

[libraries]

# Kotlin
kotlin-stdlib = { group = "org.jetbrains.kotlin", name = "kotlin-stdlib", version.ref = "kotlin" }
kotlin-reflect = { group = "org.jetbrains.kotlin", name = "kotlin-reflect", version.ref = "kotlin" }
kotlin-test = { group = "org.jetbrains.kotlin", name = "kotlin-test", version.ref = "kotlin" }

# Prometheus
prometheus-metrics-core = { module = "io.prometheus:prometheus-metrics-core", version.ref = "prometheus" }
prometheus-metrics-exporter-httpserver = { module = "io.prometheus:prometheus-metrics-exporter-httpserver", version.ref = "prometheus" }

# OpenTelemetry
opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api", version.ref = "opentelemetry" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = "opentelemetry" }
opentelemetry-semconv = { module = "io.opentelemetry.semconv:opentelemetry-semconv", version.ref = "opentelemetry-semconv" }
opentelemetry-instrumentation-api = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api", version.ref = "opentelemetry-instrumentation" }
opentelemetry-instrumentation-api-incubator = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-incubator", version.ref = "opentelemetry-instrumentation-incubator" }

# PostgreSQL
hikaricp = { module = "com.zaxxer:HikariCP", version.ref = "hikaricp" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }

# Logging
logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# JCommander
jcommander = { module = "com.beust:jcommander", version.ref = "jcommander" }

# Testing
testcontainers-testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-junit-jupiter = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
